//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NIDO_TimeAttandance_MVC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PakOman_NedoEntities : DbContext
    {
        public PakOman_NedoEntities()
            : base("name=PakOman_NedoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AllownceMaster> AllownceMasters { get; set; }
        public virtual DbSet<AttendanceLogMaster> AttendanceLogMasters { get; set; }
        public virtual DbSet<AttendancePooling> AttendancePoolings { get; set; }
        public virtual DbSet<AttendancePosting> AttendancePostings { get; set; }
        public virtual DbSet<CityMaster> CityMasters { get; set; }
        public virtual DbSet<CompanyMaster> CompanyMasters { get; set; }
        public virtual DbSet<CountryMaster> CountryMasters { get; set; }
        public virtual DbSet<DeductionMaster> DeductionMasters { get; set; }
        public virtual DbSet<DepartmentMaster> DepartmentMasters { get; set; }
        public virtual DbSet<DesignationMaster> DesignationMasters { get; set; }
        public virtual DbSet<DetailPolicy> DetailPolicies { get; set; }
        public virtual DbSet<EmailService> EmailServices { get; set; }
        public virtual DbSet<Emp_FullAndFinalSettlement> Emp_FullAndFinalSettlement { get; set; }
        public virtual DbSet<EmpEducationDetail> EmpEducationDetails { get; set; }
        public virtual DbSet<EmpExperienceDetail> EmpExperienceDetails { get; set; }
        public virtual DbSet<EmpFamilyDetail> EmpFamilyDetails { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeType> EmployeeTypes { get; set; }
        public virtual DbSet<EmpMaster> EmpMasters { get; set; }
        public virtual DbSet<EmpScheduleDetail> EmpScheduleDetails { get; set; }
        public virtual DbSet<EmpScheduleMaster> EmpScheduleMasters { get; set; }
        public virtual DbSet<ErrorLogMaster> ErrorLogMasters { get; set; }
        public virtual DbSet<GazettedHoliday> GazettedHolidays { get; set; }
        public virtual DbSet<GradeMaster> GradeMasters { get; set; }
        public virtual DbSet<InOutType> InOutTypes { get; set; }
        public virtual DbSet<JobDetail> JobDetails { get; set; }
        public virtual DbSet<LeaveApproval> LeaveApprovals { get; set; }
        public virtual DbSet<LeaveDeduction> LeaveDeductions { get; set; }
        public virtual DbSet<LeaveMapDetail> LeaveMapDetails { get; set; }
        public virtual DbSet<LeaveMapMaster> LeaveMapMasters { get; set; }
        public virtual DbSet<LeaveSetup> LeaveSetups { get; set; }
        public virtual DbSet<MartialStatu> MartialStatus { get; set; }
        public virtual DbSet<MasterPolicy> MasterPolicies { get; set; }
        public virtual DbSet<ShiftMaster> ShiftMasters { get; set; }
        public virtual DbSet<ShiftScheduleGeneralDetail> ShiftScheduleGeneralDetails { get; set; }
        public virtual DbSet<ShiftScheduleGeneralMaster> ShiftScheduleGeneralMasters { get; set; }
        public virtual DbSet<SysPolicy> SysPolicies { get; set; }
        public virtual DbSet<tbl_AccountType> tbl_AccountType { get; set; }
        public virtual DbSet<tbl_AdvanceDetail> tbl_AdvanceDetail { get; set; }
        public virtual DbSet<tbl_AllocatedBonuses> tbl_AllocatedBonuses { get; set; }
        public virtual DbSet<tbl_AllocatedDeductions> tbl_AllocatedDeductions { get; set; }
        public virtual DbSet<tbl_AllocatedEOBI> tbl_AllocatedEOBI { get; set; }
        public virtual DbSet<tbl_AllocatedLatePolicies> tbl_AllocatedLatePolicies { get; set; }
        public virtual DbSet<tbl_AllocatedProvidentFund> tbl_AllocatedProvidentFund { get; set; }
        public virtual DbSet<tbl_AllocatedSecurityDeposit> tbl_AllocatedSecurityDeposit { get; set; }
        public virtual DbSet<tbl_AllowancePosting> tbl_AllowancePosting { get; set; }
        public virtual DbSet<tbl_AssetsMaster> tbl_AssetsMaster { get; set; }
        public virtual DbSet<tbl_AutoEmailDetail> tbl_AutoEmailDetail { get; set; }
        public virtual DbSet<tbl_AutoEmailSetting> tbl_AutoEmailSetting { get; set; }
        public virtual DbSet<tbl_AutoEmailTypes> tbl_AutoEmailTypes { get; set; }
        public virtual DbSet<tbl_BankMaster> tbl_BankMaster { get; set; }
        public virtual DbSet<tbl_BonusMaster> tbl_BonusMaster { get; set; }
        public virtual DbSet<tbl_BonusPosting> tbl_BonusPosting { get; set; }
        public virtual DbSet<tbl_Circular> tbl_Circular { get; set; }
        public virtual DbSet<tbl_DecConCategory> tbl_DecConCategory { get; set; }
        public virtual DbSet<tbl_DeductionPosting> tbl_DeductionPosting { get; set; }
        public virtual DbSet<tbl_EmpLateDeduct> tbl_EmpLateDeduct { get; set; }
        public virtual DbSet<tbl_EmployeeStatus> tbl_EmployeeStatus { get; set; }
        public virtual DbSet<tbl_EmpSalary_CalculationMethod> tbl_EmpSalary_CalculationMethod { get; set; }
        public virtual DbSet<tbl_EOBIMaster> tbl_EOBIMaster { get; set; }
        public virtual DbSet<tbl_EOBIPosting> tbl_EOBIPosting { get; set; }
        public virtual DbSet<tbl_ExemptMaster> tbl_ExemptMaster { get; set; }
        public virtual DbSet<tbl_ExemptTypes> tbl_ExemptTypes { get; set; }
        public virtual DbSet<tbl_IconControl> tbl_IconControl { get; set; }
        public virtual DbSet<tbl_IncomeTaxMaster> tbl_IncomeTaxMaster { get; set; }
        public virtual DbSet<tbl_IncomeTaxPosting> tbl_IncomeTaxPosting { get; set; }
        public virtual DbSet<tbl_LateAttendnaceMaster> tbl_LateAttendnaceMaster { get; set; }
        public virtual DbSet<tbl_LatePolicyMaster> tbl_LatePolicyMaster { get; set; }
        public virtual DbSet<tbl_LeaveDeduction> tbl_LeaveDeduction { get; set; }
        public virtual DbSet<tbl_LoanDetail> tbl_LoanDetail { get; set; }
        public virtual DbSet<tbl_LoanStatusMaster> tbl_LoanStatusMaster { get; set; }
        public virtual DbSet<tbl_Manager> tbl_Manager { get; set; }
        public virtual DbSet<tbl_ManagerLevel> tbl_ManagerLevel { get; set; }
        public virtual DbSet<tbl_Notifications> tbl_Notifications { get; set; }
        public virtual DbSet<tbl_Organization_Heirarchy> tbl_Organization_Heirarchy { get; set; }
        public virtual DbSet<tbl_Pay_Schedule> tbl_Pay_Schedule { get; set; }
        public virtual DbSet<tbl_PaymentStatusMaster> tbl_PaymentStatusMaster { get; set; }
        public virtual DbSet<tbl_Payroll_Options> tbl_Payroll_Options { get; set; }
        public virtual DbSet<tbl_PendingRequestDetail> tbl_PendingRequestDetail { get; set; }
        public virtual DbSet<tbl_PendingRequestMaster> tbl_PendingRequestMaster { get; set; }
        public virtual DbSet<tbl_PFWithdrawlDetail> tbl_PFWithdrawlDetail { get; set; }
        public virtual DbSet<tbl_ProvidentFundMaster> tbl_ProvidentFundMaster { get; set; }
        public virtual DbSet<tbl_ProvidentFundPosting> tbl_ProvidentFundPosting { get; set; }
        public virtual DbSet<tbl_Province> tbl_Province { get; set; }
        public virtual DbSet<tbl_ReportCategory> tbl_ReportCategory { get; set; }
        public virtual DbSet<tbl_Reports> tbl_Reports { get; set; }
        public virtual DbSet<tbl_Request> tbl_Request { get; set; }
        public virtual DbSet<tbl_Role> tbl_Role { get; set; }
        public virtual DbSet<tbl_SalaryIncrement_Posting> tbl_SalaryIncrement_Posting { get; set; }
        public virtual DbSet<tbl_SalaryPostingMaster> tbl_SalaryPostingMaster { get; set; }
        public virtual DbSet<tbl_SecurityDepositPosting> tbl_SecurityDepositPosting { get; set; }
        public virtual DbSet<tbl_Setting> tbl_Setting { get; set; }
        public virtual DbSet<tbl_TaxMaster> tbl_TaxMaster { get; set; }
        public virtual DbSet<tbl_TaxPosting> tbl_TaxPosting { get; set; }
        public virtual DbSet<tbl_Template> tbl_Template { get; set; }
        public virtual DbSet<tbl_TemplateName> tbl_TemplateName { get; set; }
        public virtual DbSet<tbl_UserRights> tbl_UserRights { get; set; }
        public virtual DbSet<tblMenu> tblMenus { get; set; }
        public virtual DbSet<tblPolicyType> tblPolicyTypes { get; set; }
        public virtual DbSet<tblReason> tblReasons { get; set; }
        public virtual DbSet<tblUserLoginHistory> tblUserLoginHistories { get; set; }
        public virtual DbSet<UserMaster> UserMasters { get; set; }
        public virtual DbSet<ValueType> ValueTypes { get; set; }
        public virtual DbSet<WishChecker> WishCheckers { get; set; }
        public virtual DbSet<WishTempalte> WishTempaltes { get; set; }
        public virtual DbSet<tbl_AdvanceMaster> tbl_AdvanceMaster { get; set; }
        public virtual DbSet<tbl_LoanMaster> tbl_LoanMaster { get; set; }
        public virtual DbSet<tbl_EmpLateDetails> tbl_EmpLateDetails { get; set; }
        public virtual DbSet<tbl_AllocatedAllowances> tbl_AllocatedAllowances { get; set; }
        public virtual DbSet<tbl_SecurityDepositMaster> tbl_SecurityDepositMaster { get; set; }
    
        [DbFunction("PakOman_NedoEntities", "CalenderDates")]
        public virtual IQueryable<CalenderDates_Result> CalenderDates(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CalenderDates_Result>("[PakOman_NedoEntities].[CalenderDates](@StartDate, @EndDate)", startDateParameter, endDateParameter);
        }
    
        [DbFunction("PakOman_NedoEntities", "Split")]
        public virtual IQueryable<Split_Result> Split(string rowData, string splitOn)
        {
            var rowDataParameter = rowData != null ?
                new ObjectParameter("RowData", rowData) :
                new ObjectParameter("RowData", typeof(string));
    
            var splitOnParameter = splitOn != null ?
                new ObjectParameter("SplitOn", splitOn) :
                new ObjectParameter("SplitOn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[PakOman_NedoEntities].[Split](@RowData, @SplitOn)", rowDataParameter, splitOnParameter);
        }
    
        public virtual int AssignAnnualLeave()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssignAnnualLeave");
        }
    
        public virtual int Demo_Pourporse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Demo_Pourporse");
        }
    
        public virtual ObjectResult<findProcedure_Result> findProcedure(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<findProcedure_Result>("findProcedure", nameParameter);
        }
    
        public virtual int Nstp_AttendanceByID(string empIDs, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var empIDsParameter = empIDs != null ?
                new ObjectParameter("EmpIDs", empIDs) :
                new ObjectParameter("EmpIDs", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Nstp_AttendanceByID", empIDsParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<Nstp_AttendanceSummary_Result> Nstp_AttendanceSummary(string empIDs, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var empIDsParameter = empIDs != null ?
                new ObjectParameter("EmpIDs", empIDs) :
                new ObjectParameter("EmpIDs", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_AttendanceSummary_Result>("Nstp_AttendanceSummary", empIDsParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int Nstp_CarryForwardLeaves(string empIDs, Nullable<int> year)
        {
            var empIDsParameter = empIDs != null ?
                new ObjectParameter("EmpIDs", empIDs) :
                new ObjectParameter("EmpIDs", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Nstp_CarryForwardLeaves", empIDsParameter, yearParameter);
        }
    
        public virtual int Nstp_DdlLeaveRecord_By_ID_ForLates(string empIds, Nullable<System.DateTime> fromDate)
        {
            var empIdsParameter = empIds != null ?
                new ObjectParameter("EmpIds", empIds) :
                new ObjectParameter("EmpIds", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Nstp_DdlLeaveRecord_By_ID_ForLates", empIdsParameter, fromDateParameter);
        }
    
        public virtual ObjectResult<Nstp_Deduction_Result> Nstp_Deduction(string empIDs, string monthFrom)
        {
            var empIDsParameter = empIDs != null ?
                new ObjectParameter("EmpIDs", empIDs) :
                new ObjectParameter("EmpIDs", typeof(string));
    
            var monthFromParameter = monthFrom != null ?
                new ObjectParameter("MonthFrom", monthFrom) :
                new ObjectParameter("MonthFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_Deduction_Result>("Nstp_Deduction", empIDsParameter, monthFromParameter);
        }
    
        public virtual ObjectResult<Nstp_Get_LeaveReport_Result> Nstp_Get_LeaveReport(string empIDs, string dateFrom, string dateTo)
        {
            var empIDsParameter = empIDs != null ?
                new ObjectParameter("EmpIDs", empIDs) :
                new ObjectParameter("EmpIDs", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_Get_LeaveReport_Result>("Nstp_Get_LeaveReport", empIDsParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<Nstp_Get_Manual_Attendance_Result> Nstp_Get_Manual_Attendance(string empIDs, string dateFrom, string dateTo)
        {
            var empIDsParameter = empIDs != null ?
                new ObjectParameter("EmpIDs", empIDs) :
                new ObjectParameter("EmpIDs", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_Get_Manual_Attendance_Result>("Nstp_Get_Manual_Attendance", empIDsParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<Nstp_Get_RoleMap_Result> Nstp_Get_RoleMap(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_Get_RoleMap_Result>("Nstp_Get_RoleMap", roleIdParameter);
        }
    
        public virtual ObjectResult<Nstp_Get_Team_Annual_LateAttendance_Result> Nstp_Get_Team_Annual_LateAttendance(Nullable<int> managerID)
        {
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_Get_Team_Annual_LateAttendance_Result>("Nstp_Get_Team_Annual_LateAttendance", managerIDParameter);
        }
    
        public virtual int Nstp_Get_Yearly_Team_LateAttendance_ByUser(Nullable<int> managerID, Nullable<int> mode)
        {
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Nstp_Get_Yearly_Team_LateAttendance_ByUser", managerIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<Nstp_GetAttendanceDataBy_ID_Result> Nstp_GetAttendanceDataBy_ID(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_GetAttendanceDataBy_ID_Result>("Nstp_GetAttendanceDataBy_ID", empIDParameter);
        }
    
        public virtual ObjectResult<Nstp_GetBirthdayAnd_Aniversory_Result> Nstp_GetBirthdayAnd_Aniversory(Nullable<int> days)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_GetBirthdayAnd_Aniversory_Result>("Nstp_GetBirthdayAnd_Aniversory", daysParameter);
        }
    
        public virtual ObjectResult<Nstp_GetDailyAttaendanceDetail_Result> Nstp_GetDailyAttaendanceDetail(Nullable<System.DateTime> date, Nullable<int> departmentID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_GetDailyAttaendanceDetail_Result>("Nstp_GetDailyAttaendanceDetail", dateParameter, departmentIDParameter);
        }
    
        public virtual ObjectResult<Nstp_GetDailyAttendanceDepartmentWise_Result> Nstp_GetDailyAttendanceDepartmentWise(Nullable<System.DateTime> date, Nullable<int> managerID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_GetDailyAttendanceDepartmentWise_Result>("Nstp_GetDailyAttendanceDepartmentWise", dateParameter, managerIDParameter);
        }
    
        public virtual ObjectResult<Nstp_GetDailyAttendanceStats_Result> Nstp_GetDailyAttendanceStats(Nullable<System.DateTime> date, Nullable<int> managerID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_GetDailyAttendanceStats_Result>("Nstp_GetDailyAttendanceStats", dateParameter, managerIDParameter);
        }
    
        public virtual ObjectResult<Nstp_GetDailyUserData_Result> Nstp_GetDailyUserData(Nullable<int> empID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateT)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateTParameter = dateT.HasValue ?
                new ObjectParameter("dateT", dateT) :
                new ObjectParameter("dateT", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_GetDailyUserData_Result>("Nstp_GetDailyUserData", empIDParameter, dateFromParameter, dateTParameter);
        }
    
        public virtual ObjectResult<Nstp_GetManagers_Manager_Result> Nstp_GetManagers_Manager(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_GetManagers_Manager_Result>("Nstp_GetManagers_Manager", empIDParameter);
        }
    
        public virtual int Nstp_GetManagerTeamAttendance(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Nstp_GetManagerTeamAttendance", empIDParameter);
        }
    
        public virtual ObjectResult<Nstp_GetMissingEntriesBy_ID_Result> Nstp_GetMissingEntriesBy_ID(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_GetMissingEntriesBy_ID_Result>("Nstp_GetMissingEntriesBy_ID", empIDParameter);
        }
    
        public virtual int Nstp_GetRoaster(string empIDs, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var empIDsParameter = empIDs != null ?
                new ObjectParameter("EmpIDs", empIDs) :
                new ObjectParameter("EmpIDs", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Nstp_GetRoaster", empIDsParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<Nstp_GetRoaster_By_ID_Result> Nstp_GetRoaster_By_ID(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_GetRoaster_By_ID_Result>("Nstp_GetRoaster_By_ID", empIDParameter);
        }
    
        public virtual ObjectResult<string> Nstp_GetSampleEmailTemplate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Nstp_GetSampleEmailTemplate");
        }
    
        public virtual ObjectResult<Nstp_GetTeamBy_ID_Result> Nstp_GetTeamBy_ID(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_GetTeamBy_ID_Result>("Nstp_GetTeamBy_ID", empIDParameter);
        }
    
        public virtual ObjectResult<Nstp_GetTop5_Team_LateAttendance_Result> Nstp_GetTop5_Team_LateAttendance(Nullable<int> managerID)
        {
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_GetTop5_Team_LateAttendance_Result>("Nstp_GetTop5_Team_LateAttendance", managerIDParameter);
        }
    
        public virtual ObjectResult<Nstp_GetYearlyAttendanceDataBy_ID_Result> Nstp_GetYearlyAttendanceDataBy_ID(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_GetYearlyAttendanceDataBy_ID_Result>("Nstp_GetYearlyAttendanceDataBy_ID", empIDParameter);
        }
    
        public virtual ObjectResult<Nstp_MonthlyAttendance_Result> Nstp_MonthlyAttendance(string empIDs, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var empIDsParameter = empIDs != null ?
                new ObjectParameter("EmpIDs", empIDs) :
                new ObjectParameter("EmpIDs", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_MonthlyAttendance_Result>("Nstp_MonthlyAttendance", empIDsParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<Nstp_MonthlyAttendancePaySlip_Result> Nstp_MonthlyAttendancePaySlip(string empIDs, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var empIDsParameter = empIDs != null ?
                new ObjectParameter("EmpIDs", empIDs) :
                new ObjectParameter("EmpIDs", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_MonthlyAttendancePaySlip_Result>("Nstp_MonthlyAttendancePaySlip", empIDsParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<Nstp_MonthlyAttendanceSummary_Result> Nstp_MonthlyAttendanceSummary(string empIDs, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var empIDsParameter = empIDs != null ?
                new ObjectParameter("EmpIDs", empIDs) :
                new ObjectParameter("EmpIDs", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_MonthlyAttendanceSummary_Result>("Nstp_MonthlyAttendanceSummary", empIDsParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int Nstp_Organizational_Heirarchy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Nstp_Organizational_Heirarchy");
        }
    
        public virtual ObjectResult<Nstp_TrackRequestBy_TrackingID_Result> Nstp_TrackRequestBy_TrackingID(string trackingID)
        {
            var trackingIDParameter = trackingID != null ?
                new ObjectParameter("TrackingID", trackingID) :
                new ObjectParameter("TrackingID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_TrackRequestBy_TrackingID_Result>("Nstp_TrackRequestBy_TrackingID", trackingIDParameter);
        }
    
        public virtual ObjectResult<Nstp_Working_Result> Nstp_Working(string empIDs, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var empIDsParameter = empIDs != null ?
                new ObjectParameter("EmpIDs", empIDs) :
                new ObjectParameter("EmpIDs", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_Working_Result>("Nstp_Working", empIDsParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int SaveEmpSchedule(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string empIds, Nullable<int> roasterID, string createdby)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var empIdsParameter = empIds != null ?
                new ObjectParameter("EmpIds", empIds) :
                new ObjectParameter("EmpIds", typeof(string));
    
            var roasterIDParameter = roasterID.HasValue ?
                new ObjectParameter("RoasterID", roasterID) :
                new ObjectParameter("RoasterID", typeof(int));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveEmpSchedule", startDateParameter, endDateParameter, empIdsParameter, roasterIDParameter, createdbyParameter);
        }
    
        public virtual int SqlQueryNotificationStoredProcedure_303e46c1_3806_430e_be6a_a938eae76620()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SqlQueryNotificationStoredProcedure_303e46c1_3806_430e_be6a_a938eae76620");
        }
    
        public virtual int stp_GeneratePaySlip(string empIds, string dateFrom, string dateTO)
        {
            var empIdsParameter = empIds != null ?
                new ObjectParameter("EmpIds", empIds) :
                new ObjectParameter("EmpIds", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateTOParameter = dateTO != null ?
                new ObjectParameter("DateTO", dateTO) :
                new ObjectParameter("DateTO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_GeneratePaySlip", empIdsParameter, dateFromParameter, dateTOParameter);
        }
    
        public virtual int stp_GetCalendarDates(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_GetCalendarDates", startDateParameter, endDateParameter);
        }
    
        public virtual int stp_GetEmployeeLates(string empIds, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var empIdsParameter = empIds != null ?
                new ObjectParameter("EmpIds", empIds) :
                new ObjectParameter("EmpIds", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_GetEmployeeLates", empIdsParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int stp_GetEmployeeLeaves(string empIds, Nullable<int> month, Nullable<int> year)
        {
            var empIdsParameter = empIds != null ?
                new ObjectParameter("EmpIds", empIds) :
                new ObjectParameter("EmpIds", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_GetEmployeeLeaves", empIdsParameter, monthParameter, yearParameter);
        }
    
        public virtual int stp_GetManualAttendanceReport(string empId, string companyId, string departmentId, string designationId, string gradeId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tillDate)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var companyIdParameter = companyId != null ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(string));
    
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var designationIdParameter = designationId != null ?
                new ObjectParameter("DesignationId", designationId) :
                new ObjectParameter("DesignationId", typeof(string));
    
            var gradeIdParameter = gradeId != null ?
                new ObjectParameter("GradeId", gradeId) :
                new ObjectParameter("GradeId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tillDateParameter = tillDate.HasValue ?
                new ObjectParameter("TillDate", tillDate) :
                new ObjectParameter("TillDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_GetManualAttendanceReport", empIdParameter, companyIdParameter, departmentIdParameter, designationIdParameter, gradeIdParameter, fromDateParameter, tillDateParameter);
        }
    
        public virtual ObjectResult<stp_GetMissingEntriesEmployee_Result> stp_GetMissingEntriesEmployee(string mode, string empCode, Nullable<int> empID, Nullable<System.DateTime> missing_date, string empName, string designationDesc, string departmentDesc, string time_Enter)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var missing_dateParameter = missing_date.HasValue ?
                new ObjectParameter("Missing_date", missing_date) :
                new ObjectParameter("Missing_date", typeof(System.DateTime));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var designationDescParameter = designationDesc != null ?
                new ObjectParameter("DesignationDesc", designationDesc) :
                new ObjectParameter("DesignationDesc", typeof(string));
    
            var departmentDescParameter = departmentDesc != null ?
                new ObjectParameter("DepartmentDesc", departmentDesc) :
                new ObjectParameter("DepartmentDesc", typeof(string));
    
            var time_EnterParameter = time_Enter != null ?
                new ObjectParameter("Time_Enter", time_Enter) :
                new ObjectParameter("Time_Enter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetMissingEntriesEmployee_Result>("stp_GetMissingEntriesEmployee", modeParameter, empCodeParameter, empIDParameter, missing_dateParameter, empNameParameter, designationDescParameter, departmentDescParameter, time_EnterParameter);
        }
    
        public virtual ObjectResult<stp_GetPayrollDashboardData_Result> stp_GetPayrollDashboardData(Nullable<long> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetPayrollDashboardData_Result>("stp_GetPayrollDashboardData", empIdParameter);
        }
    
        public virtual int stp_InsertEmpSchedule(string empIds, Nullable<int> roasterId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var empIdsParameter = empIds != null ?
                new ObjectParameter("EmpIds", empIds) :
                new ObjectParameter("EmpIds", typeof(string));
    
            var roasterIdParameter = roasterId.HasValue ?
                new ObjectParameter("RoasterId", roasterId) :
                new ObjectParameter("RoasterId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_InsertEmpSchedule", empIdsParameter, roasterIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int stp_Pooling(string empIds, string dateFrom, string dateTO)
        {
            var empIdsParameter = empIds != null ?
                new ObjectParameter("EmpIds", empIds) :
                new ObjectParameter("EmpIds", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateTOParameter = dateTO != null ?
                new ObjectParameter("DateTO", dateTO) :
                new ObjectParameter("DateTO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_Pooling", empIdsParameter, dateFromParameter, dateTOParameter);
        }
    
        public virtual int stp_PostingNew_V2(string empIds, string dateFrom, string dateTO, string postedBy)
        {
            var empIdsParameter = empIds != null ?
                new ObjectParameter("EmpIds", empIds) :
                new ObjectParameter("EmpIds", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateTOParameter = dateTO != null ?
                new ObjectParameter("DateTO", dateTO) :
                new ObjectParameter("DateTO", typeof(string));
    
            var postedByParameter = postedBy != null ?
                new ObjectParameter("PostedBy", postedBy) :
                new ObjectParameter("PostedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_PostingNew_V2", empIdsParameter, dateFromParameter, dateTOParameter, postedByParameter);
        }
    
        public virtual ObjectResult<Nstp_GetLeaveRecord_By_ID_Result> Nstp_GetLeaveRecord_By_ID(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_GetLeaveRecord_By_ID_Result>("Nstp_GetLeaveRecord_By_ID", empIDParameter);
        }
    
        public virtual ObjectResult<Nstp_DdlLeaveRecord_By_ID_Result> Nstp_DdlLeaveRecord_By_ID(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_DdlLeaveRecord_By_ID_Result>("Nstp_DdlLeaveRecord_By_ID", empIDParameter);
        }
    
        public virtual ObjectResult<Nstp_GetLeaveDataBy_ID_Result> Nstp_GetLeaveDataBy_ID(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nstp_GetLeaveDataBy_ID_Result>("Nstp_GetLeaveDataBy_ID", empIDParameter);
        }
    
        public virtual int Attendance_JobPosting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Attendance_JobPosting");
        }
    
        public virtual ObjectResult<string> CommaSeparated()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CommaSeparated");
        }
    
        public virtual ObjectResult<stp_GetLeaveMapStatus_by_MID_Result> stp_GetLeaveMapStatus_by_MID(Nullable<long> mID, Nullable<int> iD, string leaveDsc, string leaveAllowed, string checked_Status)
        {
            var mIDParameter = mID.HasValue ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(long));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var leaveDscParameter = leaveDsc != null ?
                new ObjectParameter("LeaveDsc", leaveDsc) :
                new ObjectParameter("LeaveDsc", typeof(string));
    
            var leaveAllowedParameter = leaveAllowed != null ?
                new ObjectParameter("LeaveAllowed", leaveAllowed) :
                new ObjectParameter("LeaveAllowed", typeof(string));
    
            var checked_StatusParameter = checked_Status != null ?
                new ObjectParameter("checked_Status", checked_Status) :
                new ObjectParameter("checked_Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetLeaveMapStatus_by_MID_Result>("stp_GetLeaveMapStatus_by_MID", mIDParameter, iDParameter, leaveDscParameter, leaveAllowedParameter, checked_StatusParameter);
        }
    
        [DbFunction("PakOman_NedoEntities", "fn_query_text_from_handle")]
        public virtual IQueryable<fn_query_text_from_handle_Result> fn_query_text_from_handle(byte[] handle, Nullable<int> statement_start_offset, Nullable<int> statement_end_offset)
        {
            var handleParameter = handle != null ?
                new ObjectParameter("handle", handle) :
                new ObjectParameter("handle", typeof(byte[]));
    
            var statement_start_offsetParameter = statement_start_offset.HasValue ?
                new ObjectParameter("statement_start_offset", statement_start_offset) :
                new ObjectParameter("statement_start_offset", typeof(int));
    
            var statement_end_offsetParameter = statement_end_offset.HasValue ?
                new ObjectParameter("statement_end_offset", statement_end_offset) :
                new ObjectParameter("statement_end_offset", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_query_text_from_handle_Result>("[PakOman_NedoEntities].[fn_query_text_from_handle](@handle, @statement_start_offset, @statement_end_offset)", handleParameter, statement_start_offsetParameter, statement_end_offsetParameter);
        }
    
        [DbFunction("PakOman_NedoEntities", "fn_get_notable_query_plans")]
        public virtual IQueryable<fn_get_notable_query_plans_Result> fn_get_notable_query_plans(Nullable<int> source_id)
        {
            var source_idParameter = source_id.HasValue ?
                new ObjectParameter("source_id", source_id) :
                new ObjectParameter("source_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_get_notable_query_plans_Result>("[PakOman_NedoEntities].[fn_get_notable_query_plans](@source_id)", source_idParameter);
        }
    
        [DbFunction("PakOman_NedoEntities", "fn_get_notable_query_text")]
        public virtual IQueryable<byte[]> fn_get_notable_query_text(Nullable<int> source_id)
        {
            var source_idParameter = source_id.HasValue ?
                new ObjectParameter("source_id", source_id) :
                new ObjectParameter("source_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<byte[]>("[PakOman_NedoEntities].[fn_get_notable_query_text](@source_id)", source_idParameter);
        }
    
        [DbFunction("PakOman_NedoEntities", "fn_get_performance_counter_statistics")]
        public virtual IQueryable<fn_get_performance_counter_statistics_Result> fn_get_performance_counter_statistics(string instance_name, string path_pattern, Nullable<System.DateTimeOffset> start_time, Nullable<System.DateTimeOffset> end_time)
        {
            var instance_nameParameter = instance_name != null ?
                new ObjectParameter("instance_name", instance_name) :
                new ObjectParameter("instance_name", typeof(string));
    
            var path_patternParameter = path_pattern != null ?
                new ObjectParameter("path_pattern", path_pattern) :
                new ObjectParameter("path_pattern", typeof(string));
    
            var start_timeParameter = start_time.HasValue ?
                new ObjectParameter("start_time", start_time) :
                new ObjectParameter("start_time", typeof(System.DateTimeOffset));
    
            var end_timeParameter = end_time.HasValue ?
                new ObjectParameter("end_time", end_time) :
                new ObjectParameter("end_time", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_get_performance_counter_statistics_Result>("[PakOman_NedoEntities].[fn_get_performance_counter_statistics](@instance_name, @path_pattern, @start_time, @end_time)", instance_nameParameter, path_patternParameter, start_timeParameter, end_timeParameter);
        }
    
        [DbFunction("PakOman_NedoEntities", "fn_get_performance_counters")]
        public virtual IQueryable<fn_get_performance_counters_Result> fn_get_performance_counters(string instance_name, Nullable<System.DateTimeOffset> start_time, Nullable<System.DateTimeOffset> end_time)
        {
            var instance_nameParameter = instance_name != null ?
                new ObjectParameter("instance_name", instance_name) :
                new ObjectParameter("instance_name", typeof(string));
    
            var start_timeParameter = start_time.HasValue ?
                new ObjectParameter("start_time", start_time) :
                new ObjectParameter("start_time", typeof(System.DateTimeOffset));
    
            var end_timeParameter = end_time.HasValue ?
                new ObjectParameter("end_time", end_time) :
                new ObjectParameter("end_time", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_get_performance_counters_Result>("[PakOman_NedoEntities].[fn_get_performance_counters](@instance_name, @start_time, @end_time)", instance_nameParameter, start_timeParameter, end_timeParameter);
        }
    
        [DbFunction("PakOman_NedoEntities", "fn_get_query_text")]
        public virtual IQueryable<fn_get_query_text_Result> fn_get_query_text(Nullable<int> source_id, byte[] sql_handle, Nullable<int> statement_start_offset, Nullable<int> statement_end_offset)
        {
            var source_idParameter = source_id.HasValue ?
                new ObjectParameter("source_id", source_id) :
                new ObjectParameter("source_id", typeof(int));
    
            var sql_handleParameter = sql_handle != null ?
                new ObjectParameter("sql_handle", sql_handle) :
                new ObjectParameter("sql_handle", typeof(byte[]));
    
            var statement_start_offsetParameter = statement_start_offset.HasValue ?
                new ObjectParameter("statement_start_offset", statement_start_offset) :
                new ObjectParameter("statement_start_offset", typeof(int));
    
            var statement_end_offsetParameter = statement_end_offset.HasValue ?
                new ObjectParameter("statement_end_offset", statement_end_offset) :
                new ObjectParameter("statement_end_offset", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_get_query_text_Result>("[PakOman_NedoEntities].[fn_get_query_text](@source_id, @sql_handle, @statement_start_offset, @statement_end_offset)", source_idParameter, sql_handleParameter, statement_start_offsetParameter, statement_end_offsetParameter);
        }
    
        [DbFunction("PakOman_NedoEntities", "fn_trace_gettable")]
        public virtual IQueryable<fn_trace_gettable_Result> fn_trace_gettable(Nullable<int> trace_info_id, Nullable<System.DateTimeOffset> start_time, Nullable<System.DateTimeOffset> end_time)
        {
            var trace_info_idParameter = trace_info_id.HasValue ?
                new ObjectParameter("trace_info_id", trace_info_id) :
                new ObjectParameter("trace_info_id", typeof(int));
    
            var start_timeParameter = start_time.HasValue ?
                new ObjectParameter("start_time", start_time) :
                new ObjectParameter("start_time", typeof(System.DateTimeOffset));
    
            var end_timeParameter = end_time.HasValue ?
                new ObjectParameter("end_time", end_time) :
                new ObjectParameter("end_time", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_trace_gettable_Result>("[PakOman_NedoEntities].[fn_trace_gettable](@trace_info_id, @start_time, @end_time)", trace_info_idParameter, start_timeParameter, end_timeParameter);
        }
    
        public virtual int stp_SalaryPosting(string empIds, string dateFrom, string dateTO, string postedBy)
        {
            var empIdsParameter = empIds != null ?
                new ObjectParameter("EmpIds", empIds) :
                new ObjectParameter("EmpIds", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateTOParameter = dateTO != null ?
                new ObjectParameter("DateTO", dateTO) :
                new ObjectParameter("DateTO", typeof(string));
    
            var postedByParameter = postedBy != null ?
                new ObjectParameter("PostedBy", postedBy) :
                new ObjectParameter("PostedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_SalaryPosting", empIdsParameter, dateFromParameter, dateTOParameter, postedByParameter);
        }
    }
}
